E3A00080    // MOV R0, #128; //iteraciones -> 0x80
E3A0A010    // MOV R10, #0x10 //R10 = 16 -> 0x10
E3A01000    // MOV R1, #0	// 0.0f // X VALUE
E3A02040    // MOV R2, #0x40
E0020A92    // MUL R2, R2, R10	// R2 = 0x400
E0020A92    // MUL R2, R2, R10	// R2 = 0x4000
E0020A92    // MUL R2, R2, R10  // R2 = 0x40000
E0030A92    // MUL R3, R2, R10	// R3 = 0x400000
E0020A93    // MUL R2, R3, R10	// R2 = 0x4000000
E0020A92    // MUL R2, R2, R10 	// R2 = 0x40000000
E0822003    // ADD R2, R2, R3	// R2 = 0x40400000   // 3.0f // DX VALUE
E3A0303D    // MOV R3, #0x3D
E0030A93    // MUL R3, R3, R10	// R3 = 0x3D0
E0030A93    // MUL R3, R3, R10	// R3 = 0x3D00
E3A040CC    // MOV R4, #0xCC
E0833004    // ADD R3, R3, R4	// R3 = Ox3DCC
E0030A93    // MUL R3, R3, R10	// R3 = 0x3DCC0
E0030A93    // MUL R3, R3, R10	// R3 = 0x3DCC00
E0833004    // ADD R3, R3, R4	// R3 = Ox3DCCCC
E0030A93    // MUL R3, R3, R10	// R3 = 0x3DCCCC0
E0030A93    // MUL R3, R3, R10	// R3 = 0x3DCCCC00
E3A040CD    // MOV R4, #0xCD
E0833004    // ADD R3, R3, R4	// R3 = Ox3DCCCCCD // 0.1f // DT
E1A05003    // MOV R5, R3	// R5 = 0x3DCCCCCD // 0.1f // B
E3A040BE    // MOV R4, #0xBE 					//5tox
E0040A94    // MUL R4, R4, R10	// R4 = 0xBE0
E0040A94    // MUL R4, R4, R10	// R4 = 0xBE00
E3A060CC    // MOV R6, #0xCC
E0844006    // ADD R4, R4, R6	// R4 = 0xBECC
E0040A94    // MUL R4, R4, R10	// R4 = 0xBECC0
E0040A94    // MUL R4, R4, R10	// R4 = 0xBECC00
E0844006    // ADD R4, R4, R6	// R4 = OxBECCCC
E0040A94    // MUL R4, R4, R10	// R4 = OxBECCCC0
E0040A94    // MUL R4, R4, R10	// R4 = OxBECCCC00
E3A060CD    // MOV R6, #0xCD
E0844006    // ADD R4, R4, R6	// R4 = #0xBECCCCCD // -0.4f // A
E1A06002    // MOV R6, R2	// COMPUTE DF(X,DX) => DT * DX
E0A66003    // FPMUL32 R6, R6, R3
// COMPUTE DF(V,DT) = DT * (A * X + B * DX)
E1A07001    // MOV R7, R1	
E0A77004    // FPMUL32 R7, R7, R4	// A * X
E1A08002    // MOV R8,R2
E0A88005    // FPMUL32 R8, R8, R5	// B * DX
E0277008    // FPADD32 R7, R7, R8	// A * X + B * DX
E0A77003    // FPMUL32 R7, R7, R3	// DT * (A * X + B * DX)
// UPDATE X AND DX
E0211006    // FPADD32 R1, R1, R6	// X = X + DF(X,DX)
E0222007    // FPADD32 R2, R2, R7	// DX = DX + DF(V,DT)
E2400001    // SUB R0, R0, #1
0A000000    // BEQ END_FOR
EAFFFFF2    // B FOR
