E3A00080    // MOV R0, #128;
E3A01000    // MOV R1, #0
E3A02C42    // MOV R2,     #0x4200 //3.0 en 16 bits
E3A03C2E    // MOV R3,     #0x00002E00	//0.09375
E3833066    // ORR R3, R3, #0x00000066	//0.099975 o 0.1
E3A04CB6    // MOV R4,     #0x0000B600	//-0.375
E3844066    // ORR R4, R4, #0x00000066	//-0.3999 o -0.4
E1A05003    // MOV R5, R3	// 0.1
//for
E1A06002    // MOV R6, R2		//3.0 			//3.03		//3.021
E0E66003    // FPMUL16 R6, R6, R3	//0.3 o 0x34CC  	//0.303		//
E1A07001    // MOV R7, R1		//0			//0.3		//
E0E77004    // FPMUL16 R7, R7, R4	//0			//-0.12		//
E1A08002    // MOV R8, R2		//3.0			//3.03		//
E0E88005    // FPMUL16 R8, R8, R5	//R8 = 0.3		//0.03		//
E0677008    // FPADD16 R7, R7, R8	//R7 = 0 + 0.3 = 0.3    //-0.09		//
E0E77003    // FPMUL16 R7, R7, R3	//R7 = 0.3 * 0.1 = 0.03 //-0.009
E0611006    // FPADD16 R1, R1, R6	//R1 = 0 + 0.3 = 0.3	//0.6
E0622007    // FPADD16 R2, R2, R7	//R2 = 3.0 + 0.03 = 3.03//3.021
E2500001    // SUBS R0, R0, #1		//R0 = 127		//126
0A000000    // BEQ END_FOR
EAFFFFF2    // B FOR

//11.4 en 16bits el R1