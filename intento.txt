    arm arm(
        .clk(clk),
        .reset(reset),
        .Result(Result),
        .MemWrite(MemWrite),
        .Adr(Adr),
        .WriteData(WriteData),
        .ReadData(ReadData),
        .PC(PC),
        .Instr(Instr),
        .state(state),
        .opMul(opMul), //para multiply
        .IsLongMul(IsLongMul),         //new smull y umull

        // nuevos visualizadores
        .SrcA(SrcA),        // para ver SrcA
        .SrcB(SrcB),        // para ver SrcB
        // utiles para el multiply:
        .Rn(Rn),           // Para ver Rn
        .Rm(Rm),           // Para ver Rm (DP) o Rd (Mem Inmediate)
        .Rd(Rd),           // Para ver escritura
        .Ra(Ra),                  // Para ver Ra en el SMULL y UMULL
        .ALUResult(ALUResult),    // Para ver el resultado de la ALU
        .ALUResult2(ALUResult2),   // visualizar resultado mul 64:32
        .ALUFlags(ALUFlags),
        .RegWrite(RegWrite),
        .ALUControl(ALUControl),
        .ALUOut(ALUOut),
        .rdisplay(rdisplay)         // display a value on visualizer (basys3
    );

    // ----------
    // blk_mem_gen_0   ES EL NOMBRE DEL BLOCK DESDE BLCOK MEMORY GENERATION
    / -----------
    // WIDTH = 32  ;  DEPTH = 64  ; WRITE ENABLE ACTIVED
    // ----------
    
    blk_mem_gen_0 mem(
        .clka(clk),
        .ena(1'b1),
        .wea(MemWrite),
        .addra(Adr[31:2]),    // tu dirección word-aligned
        .dina (WriteData),         // dato de escritura
        .douta(ReadData)          // dato de lectura
    );
    
    // ------ ¿SERIA NECESARIO?
    assign isRegWrite = RegWrite && (Rd == 4'd0); // R0

    always @(posedge clk or posedge reset) begin
        if (reset) displayData <= 16'd0; // reset display data
        else if (isRegWrite) displayData <= rdisplay[15:0]; // update display data
    end
    
    hex_display hex(
        .clk(clk),
        .reset(reset),
        .data(displayData), // display value
        .anode(anode),
        .catode(catode)
    );
endmodule
